const [pickedProponents, setPickedProponents] = useState([]);
const [pickedProgramCategory, setPickedProgramCategory] = useState([]);

proponents: [],

useEffect(() => {
  const fetchProponents = async () => {
    try {
      const response = await axios.get("https://web-production-4b16.up.railway.app/get_users_exclude_roles");
      setProponents(response.data);
    } catch (error) {
      console.error('Error fetching proponents:', error);
    }
  };

  fetchProponents();
}, []);

setFormData((prevFormData) => {
  const proponents = prevFormData.proponents.includes(userID)
    ? prevFormData.proponents.filter(id => id !== userID) // Remove if already selected
    : [...prevFormData.proponents, userID]; // Add if not selected

  return {
    ...prevFormData,
    proponents,
  };
});
};

proponents: response.data.proponents.map(proponent => proponent.userID),
programCategory: response.data.programCategory.map(programCategory => programCategory.programCategoryID),
projectType: response.data.projectType.map(projectType => projectType.programCategoryID),
<Select
required
options={proponents.map((proponent) => ({
  value: proponent.userID, // Unique identifier
  label: `${proponent.firstname} ${proponent.lastname}`, // Full name
}))}
isMulti
value={formData.proponents.map((id) => {
  const proponent = proponents.find((p) => p.userID === id);
  return proponent
    ? { value: proponent.userID, label: `${proponent.firstname} ${proponent.lastname}` }
    : null;
}).filter(Boolean)} // Ensure no null values
onChange={(selectedOptions) => {
  setFormData({
    ...formData,
    proponents: selectedOptions.map((option) => option.value), // Map back to userIDs
  });
  // Correctly set picked proponents with full name
  setPickedProponents(
    selectedOptions
      ? selectedOptions.map((option) => ({
        fullname: option.label, // Save the full combined name
      }))
      : []
  );
}}
classNamePrefix="react-select"
className="w-full"
placeholder="Select proponents"
/>





programCategory: response.data.programCategory.map(programCategory => programCategory.programCategoryID),
proponents: response.data.proponents.map(proponent => proponent.userID),
programCategory: response.data.programCategory.map(programCategory => programCategory.programCategoryID),
campus: response.data.campus.map(programCategory => programCategory.programCategoryID),

<Select
required
options={campus.map((col) => ({
  value: col.campusID,
  title: col.name
}))}
components={{
  Option: CustomCampusOption,
  SingleValue: CustomSingleValue,
}}
getOptionLabel={(e) => `${e.title}`}
isMulti
value={formData.campus.map((id) => {
  const col = campus.find((c) => c.campusID === id);
  return col
    ? {
      value: col.campusID,
      title: col.name,
    }
    : null;
}).filter(Boolean)}
onChange={(selectedOptions) => {
  setFormData({
    ...formData,
    campus: selectedOptions.map((option) => option.value),
  });
}}
classNamePrefix="react-select"
className="w-full"
placeholder="Select campus"
styles={{
  control: (base) => ({
    ...base,
    display: 'flex',
    flexWrap: 'nowrap',
    overflowX: 'auto',
    scrollbarWidth: 'thin',
  }),
  option: (base, state) => ({
    ...base,
    backgroundColor: state.isSelected
      ? 'rgba(59, 130, 246, 0.1)'
      : state.isFocused
        ? 'rgba(229, 231, 235, 1)'
        : 'transparent',
    color: state.isSelected ? '#2563EB' : base.color,
  }),
  multiValue: (base) => ({
    ...base,
    backgroundColor: 'rgba(59, 130, 246, 0.1)',
  }),
  multiValueLabel: (base) => ({
    ...base,
    color: '#2563EB',
  }),
}}
/>